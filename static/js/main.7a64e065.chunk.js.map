{"version":3,"sources":["Navbar.js","App.js","Main.js","serviceWorker.js","index.js"],"names":["Navbar","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","tabindex","aria-disabled","placeholder","Component","withStyles","styles","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAUMA,E,uKAwBF,OACE,yBAAKC,MAAM,gDACT,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,OAGA,4BACED,MAAM,iBACNE,KAAK,SACLC,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,MAAM,yBAGd,yBAAKA,MAAM,2BAA2BQ,GAAG,uBACvC,wBAAIR,MAAM,mCACR,wBAAIA,MAAM,mBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,QACO,0BAAMD,MAAM,WAAZ,eAGT,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,SAIF,wBAAID,MAAM,YACR,uBACEA,MAAM,oBACNC,KAAK,IACLQ,SAAS,KACTC,gBAAc,QAJhB,cAWJ,0BAAMV,MAAM,4BACV,2BACEA,MAAM,uBACNE,KAAK,SACLS,YAAY,WAEd,4BAAQX,MAAM,uCAAuCE,KAAK,UAA1D,iB,GAvESU,aAiFNC,cAAWC,IAAXD,CAAmBd,GCjEnBgB,GCjBIH,Y,6KDDf,OACE,yBAAKI,UAAU,OACb,6D,GAJUJ,cEMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7a64e065.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import -something-, { -something- } from './-something-';\n// import classes from '*.module.css';\nimport { withStyles } from '@material-ui/styles';\n// import { Route, Switch, NavLink } from 'react-router-dom';\nimport styles from './styles/NavbarStyles.css'; // make a CSS file for this component..\n\n// import { v4 as uuidv4 } from 'uuid'; // for creating unique IDs with uuidv4();\n// npm install axios (for API requests) in terminal???\n\nclass Navbar extends Component {\n  // static defaultProps = {\n  //   key: value,\n  // };\n\n  // constructor(props) {\n  //   super(props);\n  // this.state = { key: value };\n  // this.handleClick = this.handleClick.bind(this);\n  // }\n\n  // Navbar() {\n  //   this.setState({ key: value });\n  // }\n\n  // handleClick() {\n  //   this.newFunction();\n  //   this.setState(oldState => {\n  //     return { score: oldState + 3 };\n  //   })\n  // }\n  // => This is the way and the syntax to update an existing state, not:   this.setState({ score: this.state.score + 3 });\n\n  render() {\n    return (\n      <nav class='navbar navbar-expand-lg navbar-light yuntest'>\n        <a class='navbar-brand' href='#'>\n          Yun\n        </a>\n        <button\n          class='navbar-toggler'\n          type='button'\n          data-toggle='collapse'\n          data-target='#navbarTogglerDemo02'\n          aria-controls='navbarTogglerDemo02'\n          aria-expanded='false'\n          aria-label='Toggle navigation'\n        >\n          <span class='navbar-toggler-icon'></span>\n        </button>\n\n        <div class='collapse navbar-collapse' id='navbarTogglerDemo02'>\n          <ul class='navbar-nav mr-auto mt-2 mt-lg-0'>\n            <li class='nav-item active'>\n              <a class='nav-link' href='#'>\n                Home <span class='sr-only'>(current)</span>\n              </a>\n            </li>\n            <li class='nav-item'>\n              <a class='nav-link' href='#'>\n                Link\n              </a>\n            </li>\n            <li class='nav-item'>\n              <a\n                class='nav-link disabled'\n                href='#'\n                tabindex='-1'\n                aria-disabled='true'\n              >\n                Disabled\n              </a>\n            </li>\n          </ul>\n\n          <form class='form-inline my-2 my-lg-0'>\n            <input\n              class='form-control mr-sm-2'\n              type='search'\n              placeholder='Search'\n            />\n            <button class='btn btn-outline-success my-2 my-sm-0' type='submit'>\n              Search\n            </button>\n          </form>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default withStyles(styles)(Navbar); /// connect this component to App.js...\n","import React, { Component } from 'react';\nimport Main from './Main';\n// import { Route, Switch, NavLink } from 'react-router-dom';\n// import -something-, { -something- } from './-something-';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <h1>Portfolio Coming Soon...</h1>\n        {/* <Main /> */}\n\n        {/* <NavLink exact activeClassName=\"active-link\" to=\"/-something-\">-some-text-here-</NavLink> */}\n\n        {/* <Switch> */}\n        {/* use path=\"/\" to assign a default page... */}\n        {/* <Route exact path=\"/-something-\" component={-something-} /> */}\n        {/* <Route exact path=\"/-something-\" component={() => <-something- name='Muffins\"> } /> */}\n        {/* <Route exact path=\"/-something-\" render={() => <-something- name='Biscuit\"> } /> */}\n        {/* </Switch> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Navbar from './Navbar';\n// import -something-, { -something- } from './-something-';\nimport styles from './styles/MainStyles'; // make a CSS file for this component..\n// import { Route, Switch, NavLink } from 'react-router-dom';\n\n// import { v4 as uuidv4 } from 'uuid'; // for creating unique IDs with uuidv4();\n// npm install axios (for API requests) in terminal???\n\nclass Main extends Component {\n  // static defaultProps = {\n  //   key: value,\n  // };\n\n  // constructor(props) {\n  //   super(props);\n  // this.state = { key: value };\n  // this.handleClick = this.handleClick.bind(this);\n  // }\n\n  // Main() {\n  //   this.setState({ key: value });\n  // }\n\n  // handleClick() {\n  //   this.newFunction();\n  //   this.setState(oldState => {\n  //     return { score: oldState + 3 };\n  //   })\n  // }\n  // => This is the way and the syntax to update an existing state, not:   this.setState({ score: this.state.score + 3 });\n\n  render() {\n    return (\n      <div className='Main'>\n        <Navbar />\n        <h1>Yun's Portfolio Coming Soon...</h1>\n        <h6>Testing App Component...</h6>\n\n        <h1>This is the Main component...</h1>\n      </div>\n    );\n  }\n}\n\nexport default Main; /// connect this component to App.js...\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}